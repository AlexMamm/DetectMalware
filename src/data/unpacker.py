import hashlib
import multiprocessing
import os
import sys
import threading
from pathlib import Path
from tempfile import TemporaryDirectory
from unittest import TestCase

from colorama import Fore

from unipacker.core import Sample, SimpleClient, UnpackerEngine
from unipacker.utils import RepeatedTimer
import pefile
import shutil


ROOT_DIR = os.path.dirname(os.path.abspath(__file__))

def calc_md5(sample):
    BUF_SIZE = 65536
    md5 = hashlib.md5()
    with open(sample, 'rb') as f:
        while True:
            data = f.read(BUF_SIZE)
            if not data:
                break
            md5.update(data)
    return md5


def get_pe_packer(filename):
    
    packers_sections = {
            '.aspack': 'AsPack packer', '.adata': 'AsPack packer', 'ASPack': 'AsPack packer', '.ASPack': 'AsPack packer',
            '.boom': 'The Boomerang List Builder', '.ccg': 'CCG Packer', '.charmve': 'Added by the PIN tool',
            'BitArts': 'Crunch 2.0 Packer', 'DAStub': 'DAStub Dragon Armor protector',
            '!EPack': 'Epack packer', 'FSG!': 'FSG packer', '.gentee': 'Gentee installer', 'kkrunchy': 'kkrunchy Packer',
            '.mackt': 'ImpRec-created section', '.MaskPE': 'MaskPE Packer', 'MEW': 'MEW packer', '.MPRESS1': 'Mpress Packer',
            '.MPRESS2': 'Mpress Packer', '.neolite': 'Neolite Packer', '.neolit': 'Neolite Packer', '.nsp1': 'NsPack packer',
            '.nsp0': 'NsPack packer', '.nsp2': 'NsPack packer', 'nsp1': 'NsPack packer', 'nsp0': 'NsPack packer',
            'nsp2': 'NsPack packer', '.packed': 'RLPack Packer', 'pebundle': 'PEBundle Packer', 'PEBundle': 'PEBundle Packer',
            'PEC2TO': 'PECompact packer', 'PECompact2': 'PECompact packer', 'PEC2': 'PECompact packer',
            'pec1': 'PECompact packer', 'pec2': 'PECompact packer', 'PEC2MO': 'PECompact packer',
            'PELOCKnt': 'PELock Protector', '.perplex': 'Perplex PE-Protector', 'PESHiELD': 'PEShield Packer',
            '.petite': 'Petite Packer', 'petite': 'Petite Packer', '.pinclie': 'Added by the PIN tool',
            'ProCrypt': 'ProCrypt Packer', '.RLPack': 'RLPack Packer', '.rmnet': 'Ramnit virus marker',
            'RCryptor': 'RPCrypt Packer', '.RPCrypt': 'RPCrypt Packer', '.seau': 'SeauSFX Packer',
            '.sforce3': 'StarForce Protection', '.spack': 'Simple Pack (by bagie)',
            '.svkp': 'SVKP packer', 'Themida': 'Themida Packer', '.Themida': 'Themida Packer', 'Themida ': 'Themida Packer',
            '.taz': 'Some version os PESpin', '.tsuarch': 'TSULoader', '.tsustub': 'TSULoader', '.packed': 'Unknown Packer',
            'PEPACK!!': 'Pepack', '.Upack': 'Upack packer', '.ByDwing': 'Upack Packer',
            'UPX0': 'UPX packer', 'UPX1': 'UPX packer', 'UPX2': 'UPX packer', 'UPX!': 'UPX packer', '.UPX0': 'UPX Packer',
            '.UPX1': 'UPX Packer', '.UPX2': 'UPX Packer',
            '.vmp0': 'VMProtect packer', '.vmp1': 'VMProtect packer', '.vmp2': 'VMProtect packer','VProtect': 'VMProtect Packer',
            '.winapi': 'Added by API Override tool', 'WinLicen': 'WinLicense (Themida) Protector', 
            '_winzip_': 'WinZip Self-Extractor', '.WWPACK': 'WWPACK Packer',
            '.yP': 'Y0da Protector', '.y0da': 'Y0da Protector',
        }

    try:
        exe = pefile.PE(filename, fast_load=True)
        sections = [
            section.Name.decode(errors='replace',).rstrip('\x00') for section in exe.sections
        ]
        
        matches = [packers_sections[section] for section in sections if section in packers_sections]
        if matches:
            return list(set(matches))
        else:
            return 'Not Packer'
    except:
        return 'Except!'

		
def _unpack(file):
    with TemporaryDirectory() as unpack_dir:
        unpacked = f"{unpack_dir}/unpacked.exe"
        sample = Sample(file)
        event = threading.Event()
        client = SimpleClient(event)
        heartbeat = RepeatedTimer(120, print, "- still running -", file=sys.stderr)

        engine = UnpackerEngine(sample, unpacked)
        engine.register_client(client)
        heartbeat.start()
        threading.Thread(target=engine.emu).start()
        event.wait()
        heartbeat.stop()
        engine.stop()

        path = '/'.join(file.split('/')[:-1]) + '/unpacked_' + file.split('/')[-1]
        shutil.copy(unpacked,path)
        return file, calc_md5(unpacked).hexdigest(), calc_md5(file).hexdigest()
            
def get_unpacked_file(file_list):
    if isinstance(file_list,str):
        file_list = [file_list]
    try:
        with multiprocessing.Pool(
        processes=min(multiprocessing.cpu_count(), 12)) as pool:
            for name, new_md5, old_md5 in pool.imap_unordered(_unpack, file_list):
                print(f"{name}:\n\told_md5: {old_md5}\n\tnew_md5: {new_md5}")
        print(f"\t[+] Unpacking done")
    except:
        print('\t[!] Unpacking failed')


if __name__ == '__main__':
    validation_path = '/home/alex/validation_sample/'

    for root,dirs,files in os.walk(validation_path):
        for file in files:
            filepath = os.path.join(root,file)
            packer = get_pe_packer(filepath)
            if isinstance(packer,list):
                print('[*]',filepath,packer)
                get_unpacked_file(filepath)

